      - name: Get tsMuxer (robust: GitHub API with token + source build fallback)
        run: |
          set -euo pipefail
          mkdir -p downloads tools

          gh_curl() {
            local url="$1"
            local args=(-fsSL
              -H "Accept: application/vnd.github+json"
              -H "X-GitHub-Api-Version: 2022-11-28"
              -H "User-Agent: tsmuxer-ci/1.0"
            )
            if [ -n "${GITHUB_TOKEN:-}" ]; then
              args+=(-H "Authorization: Bearer ${GITHUB_TOKEN}")
            fi
            curl "${args[@]}" "$url"
          }

          pick_asset_from_object() {
            # stdin: JSON object z polem assets
            jq -r '
              (.assets // [])[]?.browser_download_url
              | select(test("(?i)(mac|macos|osx|darwin)"))
              | select(test("\\.(zip|dmg|tar\\.gz)$"))
            ' | head -n1
          }

          pick_asset_from_array() {
            # stdin: JSON array z obiektami wydań
            jq -r '
              [ .[]? | (.assets // [])[]?.browser_download_url ] 
              | map(select(test("(?i)(mac|macos|osx|darwin)")))
              | map(select(test("\\.(zip|dmg|tar\\.gz)$")))
              | .[0]
            '
          }

          echo ">> tsMuxer: szukam assetu macOS przez GitHub API"
          TS_URL=""

          # 1) releases/latest (obiekt)
          gh_curl "https://api.github.com/repos/justdan96/tsMuxer/releases/latest" > downloads/tsmuxer_latest.json || true
          if jq -e 'type=="object" and has("assets")' downloads/tsmuxer_latest.json >/dev/null 2>&1; then
            TS_URL=$(pick_asset_from_object < downloads/tsmuxer_latest.json || true)
          fi

          # 2) jeśli brak, lista wydań (tablica)
          if [ -z "${TS_URL:-}" ]; then
            gh_curl "https://api.github.com/repos/justdan96/tsMuxer/releases?per_page=10" > downloads/tsmuxer_releases.json || true
            if jq -e 'type=="array"' downloads/tsmuxer_releases.json >/dev/null 2>&1; then
              TS_URL=$(pick_asset_from_array < downloads/tsmuxer_releases.json || true)
            fi
          fi

          if [ -n "${TS_URL:-}" ]; then
            echo "Znaleziono asset: $TS_URL"
            if echo "$TS_URL" | grep -qi '\.zip$'; then
              curl -fsSL "$TS_URL" -o downloads/tsmuxer.zip
              if file downloads/tsmuxer.zip | grep -qi 'Zip archive'; then
                rm -rf downloads/tsmuxer && mkdir -p downloads/tsmuxer
                ditto -x -k downloads/tsmuxer.zip downloads/tsmuxer || true
                CAND=$(find downloads/tsmuxer -type f -perm +111 \( -iname "tsmuxer" -o -iname "tsMuxeR" \) | head -n1 || true)
                [ -z "${CAND:-}" ] && CAND=$(find downloads/tsmuxer -type f \( -iname "tsmuxer" -o -iname "tsMuxeR" \) | head -n1 || true)
                if [ -n "${CAND:-}" ]; then
                  chmod +x "$CAND"
                  cp "$CAND" tools/tsmuxer
                  echo "tsMuxer OK z ZIP"
                  exit 0
                fi
              fi
              echo "Nie udało się wydobyć z ZIP — przechodzę do builda."
            elif echo "$TS_URL" | grep -qi '\.dmg$'; then
              curl -fsSL "$TS_URL" -o downloads/tsmuxer.dmg
              MNT=$(mktemp -d)
              if hdiutil attach downloads/tsmuxer.dmg -mountpoint "$MNT" -nobrowse -quiet; then
                CAND=$(find "$MNT" -type f -perm +111 \( -iname "tsmuxer" -o -iname "tsMuxeR" \) | head -n1 || true)
                if [ -z "${CAND:-}" ]; then
                  CAND=$(find "$MNT" -type f \( -iname "tsmuxer" -o -iname "tsMuxeR" \) | head -n1 || true)
                fi
                if [ -n "${CAND:-}" ]; then
                  cp "$CAND" tools/tsmuxer
                  chmod +x tools/tsmuxer
                  hdiutil detach "$MNT" -quiet || true
                  echo "tsMuxer OK z DMG"
                  exit 0
                fi
                hdiutil detach "$MNT" -quiet || true
              fi
              echo "Nie udało się wydobyć z DMG — przechodzę do builda."
            elif echo "$TS_URL" | grep -qi '\.tar\.gz$'; then
              curl -fsSL "$TS_URL" -o downloads/tsmuxer.tar.gz
              mkdir -p downloads/tsmuxer && tar -xzf downloads/tsmuxer.tar.gz -C downloads/tsmuxer || true
              CAND=$(find downloads/tsmuxer -type f -perm +111 \( -iname "tsmuxer" -o -iname "tsMuxeR" \) | head -n1 || true)
              if [ -n "${CAND:-}" ]; then
                cp "$CAND" tools/tsmuxer && chmod +x tools/tsmuxer
                echo "tsMuxer OK z tar.gz"
                exit 0
              fi
              echo "Nie udało się wydobyć z tar.gz — przechodzę do builda."
            fi
          else
            echo "Brak poprawnego assetu (API mogło zwrócić HTML/rate-limit). Przechodzę do builda."
          fi

          echo ">> Buduję tsMuxer ze źródeł…"
          rm -rf downloads/tsmuxer-src downloads/tsmuxer-build
          git clone --depth=1 https://github.com/justdan96/tsMuxer.git downloads/tsmuxer-src

          # CMake: ustaw polityki, żeby przejść komunikat o <3.5
          cmake -S downloads/tsmuxer-src -B downloads/tsmuxer-build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5

          ninja -C downloads/tsmuxer-build

          BIN=$(find downloads/tsmuxer-build -type f -perm +111 -name "tsmuxer" 2>/dev/null | head -n1 || true)
          [ -n "${BIN:-}" ] || { echo "Nie udało się zbudować tsMuxer"; exit 1; }
          cp "$BIN" tools/tsmuxer && chmod +x tools/tsmuxer
          echo "tsMuxer zbudowany ze źródeł"
