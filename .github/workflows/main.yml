name: Build macOS PKG (embedded JRE + GitHub tools)

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build-pkg:
    runs-on: macos-latest

    env:
      APP_NAME: "Shutter Encoder Anatomia"
      APP_VERSION: "19.4.0"                       # ← PODMIEŃ
      PKG_IDENTIFIER: "pl.dabek86.shutterencoder" # ← PODMIEŃ

      SHOULD_SIGN: ${{ secrets.INSTALLER_CERT_P12 && secrets.INSTALLER_CERT_P12_PASSWORD && 'true' || 'false' }}
      CAN_NOTARIZE_API: ${{ secrets.NOTARY_API_KEY_ID && secrets.NOTARY_API_ISSUER && secrets.NOTARY_API_KEY && 'true' || 'false' }}
      CAN_NOTARIZE_APPLEID: ${{ secrets.APPLE_ID && secrets.TEAM_ID && secrets.APP_SPECIFIC_PW && 'true' || 'false' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Temurin JDK + jq
        run: |
          brew update
          brew install --cask temurin
          brew install jq

      - name: Download all CLI tools from GitHub
        run: |
          set -euo pipefail
          mkdir -p downloads tools

          fetch_bin () {
            local url="$1" out="$2"
            echo ">> Pobieram $out"
            curl -L "$url" -o "tools/$out"
            chmod +x "tools/$out"
          }

          fetch_zip () {
            local url="$1" name="$2" pattern="$3"
            echo ">> Pobieram $name"
            curl -L "$url" -o "downloads/$name.zip"
            ditto -x -k "downloads/$name.zip" "downloads/$name" || true
            BIN=$(find "downloads/$name" -type f -perm +111 -name "$pattern" 2>/dev/null | head -n1)
            if [ -n "$BIN" ]; then
              cp "$BIN" "tools/$name"
              chmod +x "tools/$name"
            else
              echo "Nie znaleziono pliku $pattern w $name" >&2
            fi
          }

          # ffmpeg (yt-dlp build)
          fetch_zip "https://github.com/yt-dlp/FFmpeg-Builds/releases/latest/download/ffmpeg-master-latest-macos64-gpl.zip" ffmpeg ffmpeg

          # yt-dlp
          fetch_bin "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp_macos" yt-dlp

          # 7za
          curl -L "https://github.com/ip7z/7zip/releases/latest/download/7z2301-mac.tar.xz" -o downloads/7zip.tar.xz
          mkdir -p downloads/7zip && tar -xJf downloads/7zip.tar.xz -C downloads/7zip
          cp downloads/7zip/7za tools/7za && chmod +x tools/7za

          # dcraw
          fetch_bin "https://raw.githubusercontent.com/entz/dcraw-mac/master/dcraw" dcraw

          # exiftool
          curl -L "https://exiftool.org/Image-ExifTool-12.76.tar.gz" -o downloads/exiftool.tar.gz
          mkdir -p downloads/exiftool && tar -xzf downloads/exiftool.tar.gz -C downloads/exiftool --strip-components=1
          cp downloads/exiftool/exiftool tools/exiftool && chmod +x tools/exiftool

          # dvdauthor
          fetch_zip "https://downloads.sourceforge.net/project/dvdauthor/dvdauthor/0.7.2/dvdauthor-0.7.2-macos.zip" dvdauthor dvdauthor

          # tsMuxer
          fetch_zip "https://github.com/justdan96/tsMuxer/releases/latest/download/tsMuxer-mac.zip" tsmuxer tsMuxer

          # bmxtranswrap
          fetch_zip "https://downloads.sourceforge.net/project/bmxlib/bmx/bmx-0.2.4/bmx-0.2.4-macosx.zip" bmxtranswrap bmxtranswrap

          # realesrgan-ncnn-vulkan
          fetch_zip "https://github.com/xinntao/Real-ESRGAN/releases/latest/download/realesrgan-ncnn-vulkan-20220424-macos.zip" realesrgan-ncnn-vulkan realesrgan-ncnn-vulkan
          if [ -d "downloads/realesrgan-ncnn-vulkan/models" ]; then
            mkdir -p tools/realesrgan-models
            cp -R downloads/realesrgan-ncnn-vulkan/models/* tools/realesrgan-models/
          fi

          # mediainfo
          curl -L "https://mediaarea.net/download/binary/mediainfo/23.12/MediaInfo_CLI_23.12_Mac.dmg" -o downloads/mediainfo.dmg
          MNT=$(mktemp -d)
          hdiutil attach downloads/mediainfo.dmg -mountpoint "$MNT" -nobrowse -quiet
          cp "$MNT/MediaInfo_CLI_23.12_Mac/mediainfo" tools/mediainfo
          chmod +x tools/mediainfo
          hdiutil detach "$MNT" -quiet

      - name: Build .app with jpackage + custom JRE + tools
        run: |
          set -euo pipefail
          rm -rf out stage res JRE
          mkdir -p out stage res

          cp "Shutter Encoder.jar" stage/
          [ -d Library ] && rsync -a Library/ res/Library/ || true
          [ -d fonts ] && rsync -a fonts/ res/fonts/ || true

          mkdir -p res/bin
          rsync -a tools/ res/bin/

          jlink \
            --compress 0 \
            --strip-debug \
            --no-header-files \
            --no-man-pages \
            --add-modules java.base,java.datatransfer,java.desktop,java.logging,java.security.sasl,java.xml,jdk.crypto.ec \
            --output JRE

          jpackage \
            --type app-image \
            --name "${APP_NAME}" \
            --app-version "${APP_VERSION}" \
            --input stage \
            --main-jar "Shutter Encoder.jar" \
            --resource-dir res \
            --runtime-image JRE \
            --dest out

          mkdir -p "out/${APP_NAME}.app/Contents/Resources/bin"
          cp -R "res/bin/." "out/${APP_NAME}.app/Contents/Resources/bin/"
          if [ -d "tools/realesrgan-models" ]; then
            mkdir -p "out/${APP_NAME}.app/Contents/Resources/realesrgan-models"
            cp -R "tools/realesrgan-models/." "out/${APP_NAME}.app/Contents/Resources/realesrgan-models/"
          fi

      - name: Prepare payload for PKG
        run: |
          mkdir -p "payload/Applications"
          cp -R "out/${APP_NAME}.app" "payload/Applications/${APP_NAME}.app"

      - name: Build .pkg
        run: |
          pkgbuild \
            --root payload \
            --install-location / \
            --identifier "${PKG_IDENTIFIER}" \
            --version "${APP_VERSION}" \
            "${APP_NAME}-unsigned.pkg"

      - name: Upload final PKG
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}
          path: "${{ env.APP_NAME }}-unsigned.pkg"
